Exercise 7: queries on restaurant database
------------------------------------------

--> used robo3T (MongoDB)

- Display the fields restaurant_id, name, borough and cuisine
  for all the documents in  the collection restaurant.

db.getCollection('restaurant').find({},{_id: 1, name: 1, borough: 1, cuisine: 1})

- Display the second group of 5 restaurants which
  are in the borough Bronx.

db.getCollection('restaurant').find({borough: "Bronx"}).limit(5).skip(5)

/* 1 */
{
    "_id" : ObjectId("5e1f3bb6ba65a1c802018e5e"),
    "name" : "Manhem Club"
}

/* 2 */
{
    "_id" : ObjectId("5e1f3bb6ba65a1c802018ea6"),
    "name" : "The New Starling Athletic Club Of The Bronx"
}

/* 3 */
{
    "_id" : ObjectId("5e1f3bb6ba65a1c802018eee"),
    "name" : "Yankee Tavern"
}

/* 4 */
{
    "_id" : ObjectId("5e1f3bb6ba65a1c802018f27"),
    "name" : "Mcdwyers Pub"
}

/* 5 */
{
    "_id" : ObjectId("5e1f3bb6ba65a1c802018f72"),
    "name" : "The Punch Bowl"
}


- Find the restaurants who achieved a score more than 90.

> db.restaurant.find({"grades.score":{$gt: 90}},{name:1, _id:0});
{ "name" : "Murals On 54/Randolphs'S" }
{ "name" : "Gandhi" }
{ "name" : "Bella Napoli" }


- Find the restaurants that do not prepare any cuisine of 'American'
  and their grade score more than 70 and latitude less than -65.754168.

db.getCollection('restaurant').find({
    cuisine: {$ne: "American"},
    "grades.score": {$gt: 70},
    "address.coord": {$lt: -65.754168}},
    {"address.coord.$":1, _id:0, name: 1, cuisine:1})


- Find the restaurants which belong to the borough Bronx and prepared
  either  American or Chinese dish.

db.getCollection('restaurant').find({
    borough: "Bronx",
    $or: [{cuisine: "American"},
            {cuisine: "Chinese"}]},
            {_id:0, name:1, cuisine: 1})


- Find the restaurant Id, name, borough and cuisine for those restaurants
  which are not  belonging to the borough Staten Island or
  Queens or Bronx or Brooklyn.

db.getCollection('restaurant').find({
    $or: [{borough:"Staten Island"},
          {borough:"Queens"},
          {borough:"Bronx"},
          {borough:"Brooklyn"}]},
          {_id:1,
              name:1,
              borough:1,
              cuisine:1})


- Find the restaurant Id, name, borough and cuisine for those restaurants
  which  achieved a score which is not more than 10.

db.getCollection('restaurant').find({
    "grades.score": {$not: {$gt: 10}}},
          {_id:1,
              name:1,
              borough:1,
              cuisine:1,
              "grades.score":1})


- Find the restaurant Id, name, and grades for those restaurants
  which achieved a  grade of "A" and scored 11 on an ISODate
  "2014-08-11T00:00:00Z" among many of  survey dates.

db.getCollection('restaurant').find({
    "grades.date": ISODate("2014-08-11T00:00:00Z"),
    "grades.grade": "A",
    "grades.score": 11},
    {_id:1,
        name:1,
        grades:1})


- Give a list of all restaurants, ordered by cuisine alphabetically
  and borough in reverse  alphabetical order.

db.getCollection('restaurant').find({},
    {_id:1,
        name:1,
        cuisine:1,
        borough:1})
        .sort({cuisine: 1, borough: -1})

- Write a query to know whether all the addresses contain a street or not.

db.getCollection('restaurant').find({
    "address.street": {$exists: true}}).count()

    --> this returns 3772

db.getCollection('restaurant').find({
    "address.street": {$exists: false}}).count()

    --> this returns: 0